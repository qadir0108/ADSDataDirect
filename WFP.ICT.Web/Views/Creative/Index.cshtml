@model WFP.ICT.Web.Models.CreativeVM
@using ADSDataDirect.Enums
@using PagedList.Mvc
@using WFP.ICT.Data.Entities
@using WFP.ICT.Enum

<style>
    .select2-container .select2-selection {
        height: 200px;
        /*overflow: scroll;*/
        overflow-y: auto;
    } 
</style>

@{ Html.RenderPartial("_HeaderCopy"); }
<br/>
@using (Html.BeginForm())
{
    Html.AntiForgeryToken();
    Html.RenderPartial("_HeaderCreative");
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

    string currentSort = ViewBag.CurrentSort;
    if (string.IsNullOrEmpty(currentSort))
    {
        currentSort = "OrderNumber_desc";
    }

    var columnSortParams1 = new { sortOrder = ViewBag.OrderNumberSortParm };
    var columnSortParams2 = new { sortOrder = ViewBag.CampaignNameSortParm };
    var columnSortParams3 = new { sortOrder = ViewBag.CreatedBySortParm };
    var columnSortParams4 = new { sortOrder = ViewBag.BroadcastDateSortParm };
    var columnSortParams5 = new { sortOrder = ViewBag.StatusSortParm };

    var LoggedInUser = Session["user"] as WFPUser;
    var IsLoggedIn = LoggedInUser != null;
    var IsAdmin = LoggedInUser != null && (LoggedInUser.UserType == (int)UserTypeEnum.Admin);

    <div class="container">
        <div class="form-horizontal">
            <br />
            @if (TempData["Success"] != null)
            {
                <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
            }
            @if (TempData["Error"] != null)
            {
                <p class="alert alert-danger" id="successMessage">@TempData["Error"]</p>
            }
            <div class="row">
                <div class="col-md-4">

                    <div class="headertab">
                        Campaign Details
                    </div>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.CampaignId)
                    @Html.HiddenFor(model => model.OrderNumber)

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Name</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CampaignName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CampaignName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">From Line</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FromLine, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.FromLine, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">Subject Line</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SubjectLine, new {htmlAttributes = new {@class = "form-control"}})
                            @Html.ValidationMessageFor(model => model.SubjectLine, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Test Seed</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TestSeedFile, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TestSeedFile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Test Seed (use space)</label>
                        <div class="col-md-10">
                            <select multiple="multiple" style="width:100%" id="testEmails" name="testEmails">
                                @foreach (var item in Model.TestEmails)
                                {
                                    var selected = @item.Selected ? "selected" : "";
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Final Seed</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LiveSeedFile, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LiveSeedFile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Final Seed (use space)</label>
                        <div class="col-md-10">
                            <select multiple="multiple" style="width:100%" id="liveEmails" name="liveEmails">
                                @foreach (var item in Model.LiveEmails)
                                {
                                    var selected = @item.Selected ? "selected" : "";
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>

                </div>
                <div class="col-md-8">

                    <div class="headertab">
                        Campaign Creatives
                    </div><hr />
                    
                    <div class="row" style="margin-bottom: 5px">
                        <div class="col-md-offset-3 col-md-4">
                            @Html.EditorFor(model => model.QuickTestEmails, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-3">
                            <input type="submit" value="Quick Send" class="btn btn-default" name="action:QuickTestSend" data-tooltip="tooltip" title="Qucik Send"/>
                        </div>
                        <div class="col-md-2">
                            <input type="submit" value="Save" class="btn btn-default" name="action:Save" data-tooltip="tooltip" title="Save Creative"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.Creatives, new { @class = "form-control", rows = "10", cols = "10" })
                            @Html.ValidationMessageFor(model => model.Creatives, "", new { @class = "text-danger" })
                        </div>
                    </div>
                   

                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <a href="#" class="btn btn-default pull-right" id="btnRefreshLog" data-tooltip="tooltip" title="Refresh Log"><span class="glyphicon glyphicon-refresh"></span></a>
                </div>
            </div>
            <div class="row no-right-padding">
                <div class="col-md-12 no-right-padding">
                    <div id="divLog">
                        <textarea id="txtLog" class="form-group col-md-12 no-right-padding"></textarea>
                    </div>
                </div>
            </div>
            <br />
            <br />
        </div>
    </div>
}
<script src="../../Scripts/tinymce/tinymce.min.js"></script>

<script>
    tinymce.init({
        selector: '#Creatives',
        skin: 'lightgray',
        height : 500,
        plugins: [
          'advlist autolink lists link image charmap print preview hr anchor pagebreak',
          'searchreplace wordcount visualblocks visualchars code fullscreen',
          'insertdatetime media nonbreaking save table contextmenu directionality',
          'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc help'
        ],
        toolbar1: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
        toolbar2: 'print media | forecolor backcolor emoticons | codesample | code preview',
        //plugin_preview_width: $(window).width(),
        //plugin_preview_height : $(window).height(),
        branding: false,
        image_advtab: true,
        templates: [
          { title: 'Test template 1', content: 'Test 1' },
          { title: 'Test template 2', content: 'Test 2' }
        ],
        content_css: [
          '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
          '//www.tinymce.com/css/codepen.min.css'
        ]
    });
</script>
<script type="text/javascript">

    var wfp = wfp || {};

    $(function () {

        $('#TestSeedList').prop('readonly', "readonly");
        $('#FinalSeedList').prop('readonly', "readonly");

        $("#testEmails").select2({
            tags: true,
            tokenSeparators: [' ']
        });

        $("#liveEmails").select2({
            tags: true,
            tokenSeparators: [' ']
        });

        $('#testEmails').on("select2:selecting", function (e) {

            debugger;
            var select = $(this);
            var currentVals = select.val() != null ? select.val() : [];
            var roleId = e.params.args.data.id;
            var roleName = e.params.args.data.text;

            var dataToPost = {
                email: roleName,
                list: 'test'
            };

            e.preventDefault();

            $.ajax({
                type: "POST",
                url: "/Creative/AddToList",
                data: dataToPost,
                success: function (response) {
                    debugger;
                    if (response === "") wfp.reload();
                    if (response.IsSucess) {
                        wfp.showSuccess('Email ' + roleId + ' has been added in Test list successfully.');
                    } else {
                        wfp.showError(response.ErrorMessage);
                    }
                },
                failure: function (response) {
                    wfp.showError('There is erorr in service call.');
                },
                complete: function () {
                }
            });

        });
        $('#testEmails').on("select2:unselecting", function (e) {

            debugger;
            var select = $(this);
            var currentVals = select.val() != null ? select.val() : [];
            var roleId = e.params.args.data.id;
            var roleName = e.params.args.data.text;

            var dataToPost = {
                email: roleName,
                list: 'test'
            };

            e.preventDefault();

            wfp.showSwal("Are you sure?", function () {
                debugger;
                currentVals.remove(roleId);
                select.val(currentVals).trigger("change");

                $.ajax({
                    type: "POST",
                    url: "/Creative/DeleteFromList",
                    data: dataToPost,
                    success: function (response) {
                        debugger;
                        if (response === "") wfp.reload();
                        if (response.IsSucess) {
                            wfp.showSuccess('Email ' + roleId + ' has been deleted from Test list successfully.');
                        } else {
                            wfp.showError(response.ErrorMessage);
                        }
                    },
                    failure: function (response) {
                        wfp.showError('There is erorr in service call.');
                    },
                    complete: function () {
                    }
                });

                return true;

            }, function () {
                debugger;
                select.select2("close");
                return false;
            });
        });

        $('#liveEmails').on("select2:selecting", function (e) {

            debugger;
            var select = $(this);
            var currentVals = select.val() != null ? select.val() : [];
            var roleId = e.params.args.data.id;
            var roleName = e.params.args.data.text;

            var dataToPost = {
                email: roleName,
                list: 'live'
            };

            e.preventDefault();

            $.ajax({
                type: "POST",
                url: "/Creative/AddToList",
                data: dataToPost,
                success: function (response) {
                    debugger;
                    if (response === "") wfp.reload();
                    if (response.IsSucess) {
                        wfp.showSuccess('Email ' + roleId + ' has been added in Live list successfully.');
                    } else {
                        wfp.showError(response.ErrorMessage);
                    }
                },
                failure: function (response) {
                    wfp.showError('There is erorr in service call.');
                },
                complete: function () {
                }
            });

        });
        $('#liveEmails').on("select2:unselecting", function (e) {

            debugger;
            var select = $(this);
            var currentVals = select.val() != null ? select.val() : [];
            var roleId = e.params.args.data.id;
            var roleName = e.params.args.data.text;

            var dataToPost = {
                email: roleName,
                list: 'live'
            };

            e.preventDefault();

            wfp.showSwal("Are you sure?", function () {
                debugger;
                currentVals.remove(roleId);
                select.val(currentVals).trigger("change");

                $.ajax({
                    type: "POST",
                    url: "/Creative/DeleteFromList",
                    data: dataToPost,
                    success: function (response) {
                        debugger;
                        if (response === "") wfp.reload();
                        if (response.IsSucess) {
                            wfp.showSuccess('Email ' + roleId + ' has been deleted from Live list successfully.');
                        } else {
                            wfp.showError(response.ErrorMessage);
                        }
                    },
                    failure: function (response) {
                        wfp.showError('There is erorr in service call.');
                    },
                    complete: function () {
                    }
                });

                return true;

            }, function () {
                debugger;
                select.select2("close");
                return false;
            });
        });

        $('#btnRefreshLog').click(function (e) {

            debugger;

            e.preventDefault();

            var dataToPost = {
                OrderNumber: $('#OrderNumber').val()
            };

            $.ajax({
                type: "POST",
                url: "/Creative/RefreshMailChimpLog",
                data: JSON.stringify(dataToPost),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    debugger;
                    if (response === "") wfp.reload();
                    if (response.IsSucess) {
                        wfp.showSuccess('Log has been refreshed successfully.');
                        var text = "";
                        for (var i = 0; i < response.Result.length; i++) {
                            text += response.Result[i].CreatedAt + " " + response.Result[i].Message + "\n";
                        }
                        $('#txtLog').text(text);
                        $("#txtLog").fadeIn("slow");
                    } else {
                        wfp.showError(response.ErrorMessage);
                    }
                },
                failure: function (response) {
                    wfp.showError('There is erorr in service call.');
                },
                complete: function () {
                }
            });

        });

    });
</script>

