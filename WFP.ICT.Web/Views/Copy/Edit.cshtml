@model WFP.ICT.Data.Entities.Campaign

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <ul class="nav nav-tabs">
            <li class="nav active"><a href="#divTesting" data-toggle="tab" id="tabTesting">Testing</a></li>
            <li class="nav"><a href="#divApproved" data-toggle="tab" id="tabApproved">Approved</a></li>
            <li class="nav"><a href="#divTracking" data-toggle="tab" id="tabTracking">Tracking</a></li>
        </ul>

        <!-- Tab panes -->
        <div class="tab-content">
            <div class="tab-pane fade in active" id="divTesting">
                
                <br/>
                <h2>Edit Testign</h2>

                <div class="form-horizontal">
                   
                    <div class="headertab">
                        Campaign Testing
                    </div>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.CreatedAt)
                    @Html.HiddenFor(model => model.CreatedBy)
                    @Html.HiddenFor(model => model.Status)
                    @Html.HiddenFor(model => model.ReferenceNumber)
                    @Html.HiddenFor(model => model.OrderNumber)
                    @Html.HiddenFor(model => model.ParentOrderNumber)
                    @Html.HiddenFor(model => model.RepresentativeName)
                    @Html.HiddenFor(model => model.RepresentativeEmail)
                    @Html.HiddenFor(model => model.BroadcastDate)
                    @Html.HiddenFor(model => model.ReBroadCast)
                    @Html.HiddenFor(model => model.ReBroadcastDate)
                    @Html.HiddenFor(model => model.Price)
                    
                    @Html.HiddenFor(model => model.IsSuppression)
                    @Html.HiddenFor(model => model.SuppressionFile)
                    @Html.HiddenFor(model => model.IsPersonalization)
                    @Html.HiddenFor(model => model.OptOut)
                    @Html.HiddenFor(model => model.AssignedToCustomer)

                    <div class="form-group">
                        @Html.LabelFor(model => model.CampaignName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CampaignName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CampaignName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.WhiteLabel, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WhiteLabel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WhiteLabel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FromLine, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FromLine, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FromLine, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SubjectLine, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SubjectLine, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SubjectLine, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.HtmlImageFiles, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HtmlImageFiles, new { disabled = "disabled", htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "HtmlImageFiles")
                            @Html.ValidationMessageFor(model => model.HtmlImageFiles, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.CreativeURL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CreativeURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CreativeURL, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.TestSeedList, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TestSeedList, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "TestSeedList")
                            @Html.ValidationMessageFor(model => model.TestSeedList, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FinalSeedList, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinalSeedList, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "FinalSeedList")
                            @Html.ValidationMessageFor(model => model.FinalSeedList, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.IsTested, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="">
                                <div class="btn-group" data-toggle="buttons" style="padding-bottom:10px">
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.IsTested, "True")Yes
                                    </label>
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.IsTested, "False")No
                                    </label>
                                </div>
                                @*@Html.EditorFor(model => model.IsPersonalization)*@
                                @Html.ValidationMessageFor(model => model.IsTested, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.TestingTime, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TestingTime, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TestingTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.TestingUrgency, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.TestingUrgency, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.DropDownList("TestingUrgency", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TestingUrgency, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <hr />
                    <div class="headertab">
                        Campaign Demographics
                    </div><hr />

                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCodeFile, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipCodeFile, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "ZipCodeFile")
                            @Html.ValidationMessageFor(model => model.ZipCodeFile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipURL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ZipURL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.GeoDetails, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.GeoDetails, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.GeoDetails, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Demographics, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Demographics, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Demographics, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.SpecialInstructions, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.SpecialInstructions, new { @class = "form-control", rows = "6", cols = "10" })
                            @Html.ValidationMessageFor(model => model.SpecialInstructions, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

            </div>
           
        <div class="tab-pane fade" id="divApproved">
            
            <div class="form-horizontal">
                <br />
                <h2>Edit Approved</h2>
                <hr />

                <div class="headertab">
                    Campaign Approved
                </div><hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.IsMatchback, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="">
                            <div class="btn-group" data-toggle="buttons" style="padding-bottom:10px">
                                <label class="btn btn-primary">
                                    @Html.RadioButtonFor(model => model.IsMatchback, "True")Yes
                                </label>
                                <label class="btn btn-primary">
                                    @Html.RadioButtonFor(model => model.IsMatchback, "False")No
                                </label>
                            </div>
                            @*@Html.EditorFor(model => model.IsPersonalization)*@
                            @Html.ValidationMessageFor(model => model.IsMatchback, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.LinkBreakout, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LinkBreakout, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LinkBreakout, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="divTracking">
            
            <div class="form-horizontal">
                <br />
                <h2>Edit Tracking</h2>
                <hr />
                <div class="headertab">
                    Campaign Approved
                </div><hr />
                
                <div class="form-group">
                    @Html.LabelFor(model => model.DeployDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DeployDateTime, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DeployDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReportSiteLink, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ReportSiteLink, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.ReportSiteLink, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IONumber, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IONumber, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.IONumber, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>
    </div>
   
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>

    </div>
}

<script type="text/javascript">

            var wfp = wfp || {};

            $(function () {

                $('#TestingTime').datetimepicker({
                    format: 'DD/M/YYYY hh:mm:ss A'
                }); 

                $('#DeployDateTime').datetimepicker({
                    format: 'DD/M/YYYY hh:mm:ss A'
                }); 

                $('#ZipCodeFile').prop('readonly', "readonly");
                $('#HtmlImageFiles').prop('readonly', "readonly");
                $('#TestSeedList').prop('readonly', "readonly");
                $('#FinalSeedList').prop('readonly', "readonly");
                $('#SuppressionFile').prop('readonly', "readonly");

                $("input[name='IsTested']:checked").closest("label.btn").addClass("active");
                $("input[name='ReBroadCast']:checked").closest("label.btn").addClass("active");
                $("input[name='IsPersonalization']:checked").closest("label.btn").addClass("active");
                $("input[name='IsMatchback']:checked").closest("label.btn").addClass("active");
                $("input[name='IsSuppression']:checked").closest("label.btn").addClass("active");

                //// Javascript to enable link to tab
                //var url = document.location.toString();
                //if (url.match('#')) {
                //    $('.nav-tabs a[href="#' + url.split('#')[1] + '-tab"]').tab('show');
                //} //add a suffix

                //// Change hash for page-reload
                //$('.nav-tabs a').on('shown.bs.tab', function (e) {
                //    window.location.hash = e.target.hash;
                //    window.scrollTo(0, 0);
                //})
                debugger;
                var from = wfp.getURLParameter('from');
                $('#tab' + from).tab('show');

            });
</script>