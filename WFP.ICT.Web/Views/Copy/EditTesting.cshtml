@using WFP.ICT.Enum
@model WFP.ICT.Data.Entities.CampaignTesting

@{
    Html.RenderPartial("_HeaderCopy");
}

@using (Html.BeginForm("EditTesting", "Copy"))
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="form-horizontal">
            <br />
            @if (TempData["Success"] != null)
            {
                <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
            }
            @if (TempData["Error"] != null)
            {
                <p class="alert alert-danger" id="successMessage">@TempData["Error"]</p>
            }
            <div class="row">
                <div class="col-md-6">

                    <div class="headertab">
                        Campaign Testing - Details
                    </div>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.CampaignId)
                    @Html.HiddenFor(model => model.CreatedAt)
                    @Html.HiddenFor(model => model.CreatedBy)
                    @Html.HiddenFor(model => model.OrderNumber)
                    @Html.HiddenFor(model => model.ReBroadcastDate)

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Campaign Name</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CampaignName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CampaignName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WhiteLabel, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WhiteLabel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WhiteLabel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ReBroadCast, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="">
                                <div class="btn-group" data-toggle="buttons" style="padding-bottom: 10px">
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.ReBroadCast, "True")Yes
                                    </label>
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.ReBroadCast, "False")No
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.ReBroadCast, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.ReBroadcastDate, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ReBroadcastDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ReBroadcastDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FromLine, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FromLine, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FromLine, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SubjectLine, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SubjectLine, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SubjectLine, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">HtmlImage Files</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HtmlImageFiles, new {disabled = "disabled", htmlAttributes = new {@class = "form-control"}})
                            @Html.Partial("_UploadFile", "HtmlImageFiles")
                            @Html.ValidationMessageFor(model => model.HtmlImageFiles, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CreativeURL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CreativeURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CreativeURL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TestSeedList, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TestSeedList, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "TestSeedList")
                            @Html.ValidationMessageFor(model => model.TestSeedList, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FinalSeedList, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinalSeedList, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "FinalSeedList")
                            @Html.ValidationMessageFor(model => model.FinalSeedList, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.IsTested, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="">
                                <div class="btn-group" data-toggle="buttons" style="padding-bottom: 10px">
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.IsTested, "True")Yes
                                    </label>
                                    <label class="btn btn-primary">
                                        @Html.RadioButtonFor(model => model.IsTested, "False")No
                                    </label>
                                </div>
                                @Html.ValidationMessageFor(model => model.IsTested, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TestingTime, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TestingTime, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TestingTime, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Testing Urgency</label>
                        <div class="col-md-10">
                            @Html.DropDownList("TestingUrgency", null, htmlAttributes: new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.TestingUrgency, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Deploy Date Time</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DeployDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DeployDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="col-md-6">

                    <div class="headertab">
                        Campaign Demographics
                    </div><hr />

                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCodeFile, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipCodeFile, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.Partial("_UploadFile", "ZipCodeFile")
                            @Html.ValidationMessageFor(model => model.ZipCodeFile, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipURL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipURL, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ZipURL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.GeoDetails, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.GeoDetails, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.GeoDetails, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Demo</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Demographics, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Demographics, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2 pre">Special Instructions</label>
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.SpecialInstructions, new {@class = "form-control", rows = "6", cols = "10"})
                            @Html.ValidationMessageFor(model => model.SpecialInstructions, "", new {@class = "text-danger"})
                        </div>
                    </div>
                    
                    <hr />
                    <div class="headertab">
                        File Management
                    </div><hr />
                    
                    <div class="form-group">
                        <label class = "control-label col-md-2">@UploadFileTypeEnum.HtmlImagesFile</label>
                        <label class="control-label col-md-8"><a target="_blank" href="@Model.CreativeURL">@Model.CreativeURL</a></label>
                        <label class="control-label col-md-2">@((UploadFileStatusEnum)Model.HtmlImagesStatus) </label>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">@UploadFileTypeEnum.ZipFile</label>
                        <label class="control-label col-md-8"><a target="_blank" href="@Model.ZipURL">@Model.ZipURL</a></label>
                        <label class="control-label col-md-2">@((UploadFileStatusEnum)Model.ZipURLStatus) </label>
                    </div>
                    
                    <div class="form-group">
                        <label class="control-label col-md-2">@UploadFileTypeEnum.TestSeedFile</label>
                        <label class="control-label col-md-8"><a target="_blank" href="@Model.TestSeedURL">@Model.TestSeedURL</a></label>
                        <label class="control-label col-md-2">@((UploadFileStatusEnum)Model.TestSeedStatus) </label>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">@UploadFileTypeEnum.LiveSeedFile</label>
                        <label class="control-label col-md-8"><a target="_blank" href="@Model.LiveSeedURL">@Model.LiveSeedURL</a></label>
                        <label class="control-label col-md-2">@((UploadFileStatusEnum)Model.LiveSeedStatus) </label>
                    </div>
                    
                    <div class="form-group">
                        <label class="control-label col-md-2">@UploadFileTypeEnum.SuppressionFile</label>
                        <label class="control-label col-md-8"><a target="_blank" href="@Model.LiveSeedURL">@Model.SuppressionURL</a></label>
                        <label class="control-label col-md-2">@((UploadFileStatusEnum)Model.SuppressionStatus) </label>
                    </div>
                    <div class="form-group pull-right">
                        <div class="">
                            <input type="submit" value="Process" class="btn btn-default" name="action:Process" />
                        </div>
                    </div>
                    <br />
                    <br />

                    <div class="row">
                        <div class="col-md-offset-3 col-md-3">
                            <div class="form-group">
                                <div class="">
                                    <input type="submit" value="Cancel" class="btn btn-default" name="action:Cancel" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <div class="">
                                    <input type="submit" value="Save" class="btn btn-default" name="action:EditTesting"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <div class="">
                                    <input type="submit" value="Approve" class="btn btn-default" name="action:Approve"/>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    var wfp = wfp || {};

    $(function () {

        $('#TestingTime').datetimepicker({
            format: 'M/DD/YYYY hh:mm:ss A'
        });

        $('#ReBroadcastDate').datetimepicker({
            format: 'M/DD/YYYY hh:mm:ss A'
        });

        $('#DeployDate').datetimepicker({
            format: 'M/DD/YYYY hh:mm:ss A'
        });

        $('#ZipCodeFile').prop('readonly', "readonly");
        $('#HtmlImageFiles').prop('readonly', "readonly");
        $('#TestSeedList').prop('readonly', "readonly");
        $('#FinalSeedList').prop('readonly', "readonly");

        $("input[name='IsTested']:checked").closest("label.btn").addClass("active");
        $("input[name='ReBroadCast']:checked").closest("label.btn").addClass("active");

        //// Javascript to enable link to tab
        //var url = document.location.toString();
        //if (url.match('#')) {
        //    $('.nav-tabs a[href="#' + url.split('#')[1] + '-tab"]').tab('show');
        //} //add a suffix

        //// Change hash for page-reload
        //$('.nav-tabs a').on('shown.bs.tab', function (e) {
        //    window.location.hash = e.target.hash;
        //    window.scrollTo(0, 0);
        //})
        //debugger;
        //var from = wfp.getURLParameter('from');
        //$('#tab' + from).tab('show');

    });
</script>

